export type ReactElement = {
    $$typeof: any;
    type: any;
    key: any;
    ref: any;
    props: any;
};
export type ReactText = string | number;
export type FiberRoot = {
    current: Fiber;
    containerInfo: any;
    next: any;
    finishedWork: any;
};
export type RootType = {
    render(children: ReactNodeList): void;
    _internalRoot: FiberRoot | null;
};
export type ReactEmpty = null | void | boolean;
export type ReactFragment = ReactEmpty | Iterable<ReactNode>;
export type ReactNode = ReactElement | ReactText | ReactFragment;
export type ReactNodeList = ReactEmpty | ReactNode;
export type Fiber = {
    tag: WorkTag;
    elementType: any;
    type: any;
    stateNode: any;
    return: Fiber | null;
    child: Fiber | null;
    sibling: Fiber | null;
    props: any;
    memoizedState: any;
    updateQueue: any;
    flags: Flags;
    deletions: Array<Fiber> | null;
    alternate: Fiber | null;
};
export type Lanes = number;
export type Lane = number;
export declare const TotalLanes = 31;
export declare const NoLanes: Lanes;
export declare const NoLane: Lane;
export declare const SyncHydrationLane: Lane;
export declare const SyncLane: Lane;
export declare const SyncLaneIndex: number;
export declare const InputContinuousHydrationLane: Lane;
export declare const InputContinuousLane: Lane;
export declare const DefaultHydrationLane: Lane;
export declare const DefaultLane: Lane;
export declare const SyncUpdateLanes: Lane;
export type WorkTag = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29;
export declare const FunctionComponent = 0;
export declare const ClassComponent = 1;
export declare const IndeterminateComponent = 2;
export declare const HostRoot = 3;
export declare const HostPortal = 4;
export declare const HostComponent = 5;
export declare const HostText = 6;
export declare const Fragment = 7;
export declare const Mode = 8;
export declare const ContextConsumer = 9;
export declare const ContextProvider = 10;
export declare const ForwardRef = 11;
export declare const Profiler = 12;
export declare const SuspenseComponent = 13;
export declare const MemoComponent = 14;
export declare const SimpleMemoComponent = 15;
export declare const LazyComponent = 16;
export declare const IncompleteClassComponent = 17;
export declare const DehydratedFragment = 18;
export declare const SuspenseListComponent = 19;
export declare const ScopeComponent = 21;
export declare const OffscreenComponent = 22;
export declare const LegacyHiddenComponent = 23;
export declare const CacheComponent = 24;
export declare const TracingMarkerComponent = 25;
export declare const HostHoistable = 26;
export declare const HostSingleton = 27;
export declare const IncompleteFunctionComponent = 28;
export declare const Throw = 29;
export type RefObject = {
    current: any;
};
export type TypeOfMode = number;
export declare const NoMode = 0;
export declare const ConcurrentMode = 1;
export declare const ProfileMode = 2;
export declare const DebugTracingMode = 4;
export declare const StrictLegacyMode = 8;
export declare const StrictEffectsMode = 16;
export declare const NoStrictPassiveEffectsMode = 64;
export type Flags = number;
export declare const NoFlags = 0;
export declare const PerformedWork = 1;
export declare const Placement = 2;
export declare const DidCapture = 128;
export declare const Hydrating = 4096;
export declare const Update = 4;
export declare const Cloned = 8;
export declare const ChildDeletion = 16;
export declare const ContentReset = 32;
export declare const Callback = 64;
export declare const ForceClientRender = 256;
export declare const Ref = 512;
export declare const Snapshot = 1024;
export declare const Passive = 2048;
export type Update<State> = {
    lane: Lane;
    tag: 0 | 1 | 2 | 3;
    payload: any;
    callback: (() => any) | null;
    next: Update<State> | null;
};
export declare const UpdateState = 0;
export declare const ReplaceState = 1;
export declare const ForceUpdate = 2;
export declare const CaptureUpdate = 3;
export type SharedQueue<State> = {
    pending: Update<State> | null;
    lanes: Lanes;
    hiddenCallbacks: Array<() => any> | null;
};
export type ConcurrentUpdate = {
    next: ConcurrentUpdate;
    lane: Lane;
};
export type ConcurrentQueue = {
    pending: ConcurrentUpdate | null;
};
export type RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;
export declare const RefStatic = 2097152;
export declare const LayoutStatic = 4194304;
export declare const PassiveStatic = 8388608;
export declare const MaySuspendCommit = 16777216;
export declare const StaticMask: number;
export type RootState = {
    element: any;
    isDehydrated: boolean;
    cache: Cache;
};
export declare const REACT_ELEMENT_TYPE: symbol;
export declare const REACT_FRAGMENT_TYPE: symbol;
export type UseStateHook = {
    state: any;
    queue: [];
};
export type Effect = {
    tag: HookFlags;
    create: () => (() => void) | void;
    destroy: () => (() => void) | void;
    deps: Array<any>;
};
export type HookFlags = number;
export declare const HookNoFlags = 0;
export declare const HookHasEffect = 1;
export declare const HookInsertion = 2;
export declare const HookLayout = 4;
export declare const HookPassive = 8;
